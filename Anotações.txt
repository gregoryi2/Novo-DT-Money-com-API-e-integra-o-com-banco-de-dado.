Dependências:

npm i styled-components
npm i @types/styled-components -D
npm i phosphor-react
npm i @radix-ui/react-dialog
npm i @radix-ui/react-radio-group
npm i json-server -D
npm i react-hook-form
npm i zod
npm i @hookform/resolvers
npm i axios
npm i eslint @rocketseat/eslint-config -D
npm i use-context-selector scheduler

-----------------------------------------------
Dialog:

É uma biblioteca do react direcionada a criação de componente com acessibilidade.

-----------------------------------------------
npx json-server server.json -p 3333 -w -d 500

O script acima serve para iniciar o servidor a partir do arquivo server.json na porta 3333, o "-w" serve para o servidor ficar monitorando alterações e o "-d 500" para o servidor levar 500 milisegundos para fazer qualquer requisição.

Uma maneira de filtrar na url do servidor:

utilizar: "?type=income" logo após a url principal de rota, sendo "?" indicando que será feita uma busca pelo "type", um atributo que está presente no servidor e que o tipo dele é "income". Exemplo:

localhost:3333/transactionstype=income

filtrar por ordem crescente:
?_sort=createdAt

Filtrar por ordem decrescente:
?_sort=createdAt&_order=desc

Busca por palavra especifica que esteja contida em algum campo do servidor:
?q=palavra

-----------------------------------------------
A maneira correta de utilizar o método fetch no react, é através do useEffect que tendo passado um array vazio como parâmetro, a requisição só será feita uma única vez ou quando for passada alguma instrulção. Exemplo: 

useEffect(() => {
   fetch('url aqui')
      .then(responser => {
         console.log})
}, [])

useEffect não pode ser asincrono, mas pode ter uma chamada de uma função que é asincrona.

----------------------------------------------
Query:
a palavra refere-se a uma busca por vários campos.

----------------------------------------------
Tipo enum:

type: z.enum(['income', 'outcome'])

serve para definir uma espécie de booleano mas que você escolhe os parâmetros.

-----------------------------------------------
useContextSelector:

const transactions = useContextSelector(NomeDoContexto, (context) =>{
   return context.transactions
})

Como visto no exemplo acima, serve para receber um contexto, e retornar somente o que será utilizado do mesmo, assim evitando recarregamento desnecessarios de componentes.

-----------------------------------------------
useCallback(() => {},[])

Com a mesma sintaxe do useEffect, ele serve para que uma função não seja recarregada caso ela não tenha sido atualizada com algum dado novo ou alterada.

Caso a função passada como primeiro parâmetro nessecite de uma variável externa, essa variável deverá ser passada como parâmetro no array indicado acima, caso a variável não seja passada, a função será atualizada com valores desatualizados dessa função.

------------------------------------------------
Como funciona o React e quando usar o MEMO:

**
* Por que um componente renderiza?
* - Hooks changed (mudou estado, contexto, reducer);
* - Props changed (mudou propriedades);
* - Parent rerendered (componente pai renderizou);
*
* Qual o fluxo de renderização?
* 1. O React recria o HTML da interface daquele componente
* 2. Compara a versão do HTML recriada com a versão anterior
* 3. Se mudou alguma coisa, ele reescreve o HTML na tela
*
*Memo:
* 0. Hooks changed, Props changed (deep comparison)
* 0.1: Comparar a versão anterior dos hooks e props
* 0.2: Se mudou algo, ele vai permitir a nova renderização
**